name: Create versioned release
# Test, build, and publish a release draft on new vX.Y.Z tag

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Create versioned release draft
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Generate version string
      id: get-version
      run: |
        VERSION=$(ant -q -S print_version)
        SHORT=$(echo "${VERSION}" | cut -d. -f-2)
        BUILD=$(cat .build.number | grep build.number | cut -f2 -d"=")
        echo "::set-env name=BUILD::$BUILD"
        echo "::set-env name=SHORT::$SHORT"
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-env name=TAG::$(echo "v${VERSION}")"

        REFTAG="$(echo "$GITHUB_REF" | awk -F/ '{print $NF}')"
        echo "::set-env name=REFTAG::$REFTAG"

      
    - name: Sanity check
      run: |
        # tag is v1.2[.3]-567[.abc4]
        if [[ "$TAG" =~ ^v[0-9][0-9]*[.][0-9][0-9]*([.][0-9][0-9]*)?(-[1-9][0-9]*)([.][a-z][a-z0-9]*)?$ ]]; then
          echo tag $TAG okay
        else
          echo "tag (${VERSION},${BASE},${SHORT},${BUILD}) $TAG not okay!"
          exit 1
        fi

        # version is 1.2[.3]-567[.abc4]
        if [[ "${VERSION}" =~ ^[0-9][0-9]*[.][0-9][0-9]*([.][0-9][0-9]*)?(-[1-9][0-9]*)([.][a-z][a-z0-9]*)?$ ]]; then
          echo version $VERSION okay
        else
          echo "version (${VERSION},${BASE},${SHORT},${BUILD}) $VERSION not okay!"
          exit 1
        fi

        # git tag has correct version
        if [[ "$TAG" == "$REFTAG" ]]; then
          echo tags match
        else
          echo "WARNING: $TAG <> $REFTAG"
          TAG=$REFTAG
          echo "::set-env name=TAG::$TAG"
          # exit 1
        fi

        # most recent tag has older build number
        LASTTAG=$(git tag -l v* --sort='-committerdate')
        OLDBUILD=$(git show ${LASTTAG}:.build.number | grep build.number | cut -f2 -d"=")
        if [[ $BUILD == $OLDBUILD ]]; then
          echo "build.number $BUILD has not changed since most recent tag ${LASTTAG}, please update by running ant build locally!"
          exit 1
        fi

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Test with ant
      run: |
         ant -noinput -buildfile build.xml run_tests
         fails=$(grep -L  "Failures: 0, Errors: 0" test/junit/TEST-*)
         if [ -n "$fails" ]; then
           echo Errors in $fails
           cat $fails
           exit 1
         fi
      # do not exit before all commands are executed
      shell: bash --noprofile --norc -o pipefail {0}

    - name: Build with ant
      run: ant -noinput -buildfile build.xml

    - name: Read RELEASENOTES and CHANGELOG
      id: changelog
      run: |
        value=$(cat RELEASENOTES.txt | iconv -f ISO-8859-1)
        json_escape () {
          printf '%s' "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))[1:-1]'
        }
        value=$(json_escape "$value")
        echo "::set-env name=BODY::$value"

    - name: prepare meta
      run: |
        set -x
        if [[ "${{ env.TAG }}" =~ .*-([0-9]*[.])?\([a-zA-Z][a-zA-Z]*\).* ]]; then
          TYPE=$(echo ${{ env.TAG }} | sed -e "s/.*-\([0-9]*[.]\)\([a-zA-Z][a-zA-Z]*\).*/\2/")
        else
          TYPE=stable
        fi
        if [[ ! "$TYPE" =~ ^[a-zA-Z]+$ ]]; then
          echo "invalid type $TYPE"
          exit 1
        fi
        echo "::set-env name=TYPE::$TYPE"

    - name: Create release
      uses: meeDamian/github-release@2.0
      with:
        draft: true
        prerelease: false
        allow_override: false
        token: ${{ secrets.GITHUB_TOKEN }}
        commitish: master
        tag: ${{ env.TAG }}
        name: Release v${{ env.VERSION }} (${{ env.TYPE }})
        body: ${{ env.BODY }}
        gzip: folders
        files: >
          LICENSE.txt
          README.md
          RELEASENOTES.txt
          CHANGELOG.txt
          VERSION
          magellan_v${{ env.VERSION }}.jar
          magellan_v${{ env.VERSION }}.zip

#    - name: trigger meta action
#      run: |
#        curl -X POST https://api.github.com/repos/${{ github.repository_owner }}/magellan-meta/dispatches \
#          -H 'Accept: application/vnd.github.everst-preview+json' \
#          -u magellan-meta-machineuser:${{ secrets.META_REPO_ACCESS }} \
#          --data '{
#            "event_type": "actions-release-trigger",
#            "client_payload": {
#              "ref" : "${{ github.ref }}",
#              "sha": "${{ github.sha }}",
#              "caller_repository" : "${{ github.repository }}",
#              "meta_repository" : "${{ github.repository_owner }}/magellan-meta",
#              "tag" : "${{ env.TAG }}",
#              "version" : "${{ env.VERSION }}",
#              "type": "${{ env.TYPE }}" }}'

