name: Create pre-release
# Test, build, and publish a release and tag it with "version-latest" on pushes to master

on:
  push:
    branches:
      - "master"

jobs:
  build:
    name: Create pre-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Generate version string
      id: get-version
      run: |
        VERSION=$(ant -q -S print_version)
        SHORT=$(echo "${VERSION}" | cut -d. -f-2)
        BUILD=$(cat .build.number | grep build.number | cut -f2 -d"=")
        echo "::set-env name=BUILD::$BUILD"
        echo "::set-env name=SHORT::$SHORT"
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-env name=TAG::$(echo "v${SHORT}-latest")"

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Test with ant
      run: |
         ant -noinput -buildfile build.xml run_tests
         fails=$(grep -L  "Failures: 0, Errors: 0" test/junit/TEST-*)
         if [ -n "$fails" ]; then
           echo Errors in $fails
           cat $fails
           exit 1
         fi
      # do not exit before all commands are executed
      shell: bash --noprofile --norc -o pipefail {0}

    - name: Sanity check
      run: |
        # tag is v1.2-latest
        if [[ "${TAG}" =~ ^v[0-9][0-9]*[.][0-9][0-9]*-latest$ ]]; then
          echo tag $TAG okay
        else
          echo "tag (${VERSION}, ${SHORT}) $TAG not okay!"
          exit 1
        fi

        # version is 1.2[.3]-567.latest,alpha, or beta
        if [[ "${VERSION}" =~ ^[0-9][0-9]*[.][0-9][0-9]*([.][0-9][0-9]*)?-[0-9][0-9]*[.](latest|alpha|beta|rc)$ ]]; then
          echo version $VERSION okay
        else
          echo "version $VERSION not okay!"
          exit 1
        fi

        # most recent tag has older build number
        LASTTAG=$(git tag -l v* --sort='-committerdate' | head -1)
        OLDBUILD=$(git show ${LASTTAG}:.build.number | grep build.number | cut -f2 -d"=")
        if [[ "$OLDBUILD" =~ ^[0-9][0-9]*$ ]]; then
          if (( BUILD == OLDBUILD )); then
            echo "build.number $BUILD has not changed since most recent tag ${LASTTAG}, please update by running ant build locally!"
            exit 1
          fi
        else
          echo "bad tag or build $LASTTAG - $OLDBUILD"
        fi

        # last -latest tag has older build number
        OLDBUILD=$(git show ${TAG}:.build.number | grep build.number | cut -f2 -d"=")
        if [[ "$OLDBUILD" =~ ^[0-9][0-9]*$ ]]; then
          if (( BUILD <= OLDBUILD )); then
            echo "build.number $BUILD has not changed for tag ${TAG}, please update by running ant build locally!"
            exit 1
          fi
        else
          echo "Warning, previous build not found for ${TAG}!"
        fi

    - name: Build with ant
      run: ant -noinput -buildfile build.xml

    - name: Read RELEASENOTES and CHANGELOG
      id: changelog
      run: |
        value=$(cat doc/NIGHTLY.txt | iconv -f ISO-8859-1; echo -e '\n\n'; echo -e '\n## Excerpt from CHANGELOG.txt\n\n'; head -20 CHANGELOG.txt | iconv -f ISO-8859-1; echo -e '\n...\n' )
        echo "::set-env name=BODY::$value"

    - name: Publish git tag "vX.Y-latest"
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git remote -v
        git tag -f "${TAG}"
        REMOTE="https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
        git push --force "$REMOTE" "${TAG}"

    - name: prepare meta
      run: |
        set -x
        if [[ "${{ env.TAG }}" =~ .*-([0-9]*[.])?\([a-zA-Z][a-zA-Z]*\).* ]]; then
          TYPE=$(echo ${{ env.TAG }} | sed -e "s/.*-\([0-9]*[.]\)\([a-zA-Z][a-zA-Z]*\).*/\2/")
        else
          TYPE=stable
        fi
        if [[ ! "$TYPE" =~ ^[a-zA-Z]+$ ]]; then
          echo "invalid type $TYPE"
          exit 1
        fi
        echo "::set-env name=TYPE::$TYPE"

    - name: Create release
      uses: meeDamian/github-release@escaping
      with:
        prerelease: true
        allow_override: true
        token: ${{ secrets.GITHUB_TOKEN }}
        commitish: master
        tag: ${{ env.TAG }}
        name: Pre-Release  v${{ env.VERSION }}
        body: |
          ${{ env.BODY }}
        gzip: folders
        files: >
          LICENSE.txt
          README.md
          RELEASENOTES.txt
          CHANGELOG.txt
          VERSION
          magellan_v${{ env.VERSION }}.jar
          magellan_v${{ env.VERSION }}.zip

    - name: trigger meta action
      run: |
        curl -X POST https://api.github.com/repos/${{ github.repository_owner }}/magellan2.github.io/dispatches \
          -H 'Accept: application/vnd.github.everst-preview+json' \
          -u magellan-meta-machineuser:${{ secrets.META_REPO_ACCESS }} \
          --data '{
            "event_type": "actions-release-trigger",
            "client_payload": {
              "ref" : "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "caller_repository" : "${{ github.repository }}",
              "meta_repository" : "${{ github.repository_owner }}/magellan2.github.io",
              "tag" : "${{ env.TAG }}",
              "version" : "${{ env.VERSION }}",
              "type": "${{ env.TYPE }}" }}'

